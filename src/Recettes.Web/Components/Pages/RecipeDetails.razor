@page "/recipe/{recipeId:long}"
@inject RecettesApiClient RecettesApiClient

<a class="back-link" href="/">←Back to all recipes</a>

<div class="recipe">
    @if (recipe == null)
    {
        <h1>Recipe not found!</h1>
    }
    else
    {
        <PageTitle>@recipe.Name</PageTitle>
        <h1>@recipe.Name</h1>
        <div class="source-and-servings">
            @recipe.SourceShort | Servings: @recipe.Servings
        </div>
        @*
    <div class="star-rating-avg">
    <StarRating Value="recipe.Reviews.AverageRating()" />
    </div> *@
        @*
    <img class="recipe-banner" src="@recipe.BannerImageUrl" /> *@

        <img class="recipe-banner" src="@recipe.ImageUrl" />
        <div class="recipe-details">
            <h2>Ingredients</h2>
            <ul>

                @for (int i = 0; i < recipe.Ingredients?.Count(); i++)
                {
                    string id = $"ingredient{i}";
                    <li>
                        <input id="@id" type="checkbox" />
                        <label for="@id">@recipe.Ingredients.ToArray()[i]</label>
                    </li>
                }
            </ul>
            <h2>Instructions</h2>
            <ol>
                @foreach (var instruction in recipe?.Instructions?.Split("\n"))
                {
                    <li>@instruction</li>
                }
            </ol>
            @*             <h2>Tags</h2>
        @foreach (var tag in recipe.Tags)
        {
        <a class="tag" href="@($"tag/{tag}")">@tag</a>
        } *@
            @* <StarRatingReviews Reviews="recipe.Reviews" OnSubmitReview="OnSubmitReview" /> *@
        </div>
    }
</div>

@code {
    Recipe? recipe;

    [Parameter, EditorRequired]
    public long RecipeId { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        recipe = await RecettesApiClient.GetRecipeAsync(RecipeId);
    }

}